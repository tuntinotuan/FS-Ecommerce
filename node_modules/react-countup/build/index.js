'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startAnimation = undefined;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _countup = require('countup.js');

var _countup2 = _interopRequireDefault(_countup);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const startAnimation = exports.startAnimation = component => {
  if (component && component.spanElement) {
    const {
      start,
      end,
      duration,
      useEasing,
      useGrouping,
      separator,
      decimals,
      decimal,
      prefix,
      suffix,
      onComplete,
      onStart
    } = component.props;

    const countupInstance = new _countup2.default(component.spanElement, start, end, decimals, duration, {
      useEasing,
      useGrouping,
      separator,
      decimal,
      prefix,
      suffix
    });

    onStart();
    countupInstance.start(onComplete);
  } else {
    throw new Error('You need to pass the CountUp component as an argument!\neg. this.myCountUp.startAnimation(this.myCountUp);');
  }
};

/**
 * Component
 */
class CountUp extends _react.Component {
  constructor(...args) {
    var _temp;

    return _temp = super(...args), this.spanElement = null, this.refSpan = span => {
      this.spanElement = span;
    }, _temp;
  }

  componentDidMount() {
    startAnimation(this);
  }

  shouldComponentUpdate(nextProps) {
    const hasCertainPropsChanged = this.props.duration !== nextProps.duration || this.props.end !== nextProps.end || this.props.start !== nextProps.start;

    return nextProps.redraw || hasCertainPropsChanged;
  }

  componentDidUpdate() {
    startAnimation(this);
  }

  render() {
    const { className, start, style } = this.props;

    return _react2.default.createElement(
      'span',
      { className: className, style: style, ref: this.refSpan },
      start
    );
  }
}
exports.default = CountUp;
CountUp.defaultProps = {
  className: undefined,
  decimal: '.',
  decimals: 0,
  duration: 3,
  end: 100,
  onComplete: () => {},
  onStart: () => {},
  prefix: '',
  separator: ',',
  start: 0,
  suffix: '',
  redraw: false,
  style: undefined,
  useEasing: true,
  useGrouping: false
};